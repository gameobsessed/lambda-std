"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordsControllerClass = exports.EventControllerClass = void 0;
const __1 = require("../..");
class EventControllerClass {
    constructor(UserControllerCtor) {
        this.initialized = false;
        this.configStorage = (0, __1.getConfigurationStorage)();
        this.userControllerCtor = UserControllerCtor;
        this.userController = new UserControllerCtor();
        const initializerConfig = this.configStorage.findInitializer(this.userControllerCtor);
        this.initializer =
            initializerConfig && this.userController[initializerConfig.methodName];
    }
    async preprocess(input, ctx) {
        const handlerName = this.getHandlerName(input);
        const handlerConfig = (this.handlerConfig = this.configStorage.findHandler(this.userControllerCtor, handlerName));
        if (!handlerConfig) {
            throw new Error(`There is no handler for the ${handlerName} defined on the controller`);
        }
        const params = this.configStorage.findParams(this.userControllerCtor, handlerConfig.methodName);
        const args = [];
        for (const param of params) {
            args[param.parameterIndex] = param.resolve(input, ctx);
        }
        return Promise.all(args);
    }
    async handle(input, ctx) {
        await this.initialize();
        const params = await this.preprocess(input, ctx);
        const handler = this.userController[this.handlerConfig.methodName];
        const result = await handler.apply(this.userController, params);
        return result;
    }
    async initialize() {
        if (!this.initialized && this.initializer) {
            await this.initializer.call(this.userController);
        }
    }
}
exports.EventControllerClass = EventControllerClass;
class RecordsControllerClass extends EventControllerClass {
    async preprocessRecord(input, ctx) {
        const handlerName = this.getRecordHandlerName(input);
        const handlerConfig = (this.handlerConfig = this.configStorage.findHandler(this.userControllerCtor, handlerName));
        if (!handlerConfig) {
            throw new Error(`There is no handler for the ${handlerName} defined on the controller`);
        }
        const params = this.configStorage.findParams(this.userControllerCtor, handlerConfig.methodName);
        const args = [];
        for (const param of params) {
            args[param.parameterIndex] = param.resolve(input, ctx);
        }
        return Promise.all(args);
    }
    async handleRecords(input, ctx) {
        await this.initialize();
        console.debug('event: ', JSON.stringify(input, null, 2));
        for (const record of input.Records) {
            const params = await this.preprocessRecord(record, ctx);
            const handler = this.userController[this.handlerConfig.methodName];
            await handler.apply(this.userController, params);
        }
    }
}
exports.RecordsControllerClass = RecordsControllerClass;
//# sourceMappingURL=data:application/json;base64,