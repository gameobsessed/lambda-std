"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const controller_mock_1 = require("./controller.mock");
describe('controller', () => {
    it('should create appsync controller', async () => {
        const id = 'uuid';
        const event = {
            info: {
                fieldName: 'getProduct',
            },
            arguments: {
                id,
            },
        };
        const result = await (0, __1.caller)(controller_mock_1.ProductController)(event);
        expect(result).toBe(id);
    });
    it('should create event bridge controller for update', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_UPDATED',
            detail: JSON.stringify(game),
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'validation' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
    it('should create event bridge controller for publish', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_PUBLISHED',
            detail: JSON.stringify(game),
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'published' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci50ZXN0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImRlY29yYXRvcnMvY29udHJvbGxlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMEJBQTJCO0FBQzNCLHVEQUEyRTtBQUUzRSxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ2pCLE1BQU0sS0FBSyxHQUF1QztZQUNoRCxJQUFJLEVBQUU7Z0JBQ0osU0FBUyxFQUFFLFlBQVk7YUFDakI7WUFDUixTQUFTLEVBQUU7Z0JBQ1QsRUFBRTthQUNIO1NBQ0YsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQ3pCLG1DQUFpQixDQUNsQixDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRSxNQUFNLElBQUksR0FBRztZQUNYLEVBQUUsRUFBRSxRQUFRO1NBQ2IsQ0FBQTtRQUNELE1BQU0sS0FBSyxHQUF3QztZQUNqRCxhQUFhLEVBQUUsY0FBYztZQUM3QixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDN0IsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQWdDLGdDQUFjLENBQUMsQ0FDeEUsS0FBSyxDQUNOLENBQUE7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUE7UUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBSSxDQUFDLENBQUE7SUFDckMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsbURBQW1ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDakUsTUFBTSxJQUFJLEdBQUc7WUFDWCxFQUFFLEVBQUUsUUFBUTtTQUNiLENBQUE7UUFDRCxNQUFNLEtBQUssR0FBd0M7WUFDakQsYUFBYSxFQUFFLGdCQUFnQjtZQUMvQixNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDN0IsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQWdDLGdDQUFjLENBQUMsQ0FDeEUsS0FBSyxDQUNOLENBQUE7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBSSxDQUFDLENBQUE7SUFDckMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFN5bmNSZXNvbHZlckV2ZW50LCBFdmVudEJyaWRnZUV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSdcbmltcG9ydCB7IGNhbGxlciB9IGZyb20gJy4uJ1xuaW1wb3J0IHsgR2FtZSwgR2FtZUNvbnRyb2xsZXIsIFByb2R1Y3RDb250cm9sbGVyIH0gZnJvbSAnLi9jb250cm9sbGVyLm1vY2snXG5cbmRlc2NyaWJlKCdjb250cm9sbGVyJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhcHBzeW5jIGNvbnRyb2xsZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWQgPSAndXVpZCdcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBcHBTeW5jUmVzb2x2ZXJFdmVudDxhbnk+PiA9IHtcbiAgICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiAnZ2V0UHJvZHVjdCcsXG4gICAgICB9IGFzIGFueSxcbiAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICBpZCxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihcbiAgICAgIFByb2R1Y3RDb250cm9sbGVyXG4gICAgKShldmVudClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoaWQpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgZXZlbnQgYnJpZGdlIGNvbnRyb2xsZXIgZm9yIHVwZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBnYW1lID0ge1xuICAgICAgaWQ6ICdnYW1lSWQnLFxuICAgIH1cbiAgICBjb25zdCBldmVudDogUGFydGlhbDxFdmVudEJyaWRnZUV2ZW50PGFueSwgYW55Pj4gPSB7XG4gICAgICAnZGV0YWlsLXR5cGUnOiAnR0FNRV9VUERBVEVEJyxcbiAgICAgIGRldGFpbDogSlNPTi5zdHJpbmdpZnkoZ2FtZSksXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihHYW1lQ29udHJvbGxlcikoXG4gICAgICBldmVudFxuICAgIClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyAuLi5nYW1lLCBzdGF0dXM6ICd2YWxpZGF0aW9uJyB9KVxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVJbnN0YW5jZU9mKEdhbWUpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgZXZlbnQgYnJpZGdlIGNvbnRyb2xsZXIgZm9yIHB1Ymxpc2gnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZ2FtZSA9IHtcbiAgICAgIGlkOiAnZ2FtZUlkJyxcbiAgICB9XG4gICAgY29uc3QgZXZlbnQ6IFBhcnRpYWw8RXZlbnRCcmlkZ2VFdmVudDxhbnksIGFueT4+ID0ge1xuICAgICAgJ2RldGFpbC10eXBlJzogJ0dBTUVfUFVCTElTSEVEJyxcbiAgICAgIGRldGFpbDogSlNPTi5zdHJpbmdpZnkoZ2FtZSksXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihHYW1lQ29udHJvbGxlcikoXG4gICAgICBldmVudFxuICAgIClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyAuLi5nYW1lLCBzdGF0dXM6ICdwdWJsaXNoZWQnIH0pXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZUluc3RhbmNlT2YoR2FtZSlcbiAgfSlcbn0pXG4iXX0=