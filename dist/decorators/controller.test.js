"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const controller_mock_1 = require("./controller.mock");
describe('controller', () => {
    it('should create appsync controller', async () => {
        const id = 'uuid';
        const event = {
            info: {
                fieldName: 'getProduct',
            },
            arguments: {
                id,
            },
        };
        const result = await (0, __1.caller)(controller_mock_1.ProductController)(event);
        expect(result).toBe(id);
    });
    it('should call appsync controller mutation', async () => {
        const id = 'uuid';
        const event = {
            info: {
                fieldName: 'createProduct',
            },
            arguments: {
                input: {
                    id,
                },
            },
        };
        const result = await (0, __1.caller)(controller_mock_1.ProductController)(event);
        expect(result.id).toBe(id);
    });
    it('should throw error from appsync controller mutation', async () => {
        const event = {
            info: {
                fieldName: 'createProduct',
            },
            arguments: {
                input: {},
            },
        };
        const result = (0, __1.caller)(controller_mock_1.ProductController)(event);
        await expect(async () => await result).rejects.toThrow();
    });
    it('should create event bridge controller for update', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_UPDATED',
            detail: game,
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'validation' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
    it('should create event bridge controller for publish', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_PUBLISHED',
            detail: game,
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'published' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
    it('should create s3 records controller', async () => {
        const s3Event = {
            Records: [
                { eventName: 'ObjectCreated:Copy' },
                { eventName: 'ObjectCreated:Put' },
            ],
        };
        const result = await (0, __1.caller)(controller_mock_1.ImageController)(s3Event);
        expect(result).toBeUndefined();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci50ZXN0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImRlY29yYXRvcnMvY29udHJvbGxlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsMEJBQTJCO0FBQzNCLHVEQUswQjtBQUUxQixRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ2pCLE1BQU0sS0FBSyxHQUF1QztZQUNoRCxJQUFJLEVBQUU7Z0JBQ0osU0FBUyxFQUFFLFlBQVk7YUFDakI7WUFDUixTQUFTLEVBQUU7Z0JBQ1QsRUFBRTthQUNIO1NBQ0YsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQ3pCLG1DQUFpQixDQUNsQixDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUE7UUFDakIsTUFBTSxLQUFLLEdBQXVDO1lBQ2hELElBQUksRUFBRTtnQkFDSixTQUFTLEVBQUUsZUFBZTthQUNwQjtZQUNSLFNBQVMsRUFBRTtnQkFDVCxLQUFLLEVBQUU7b0JBQ0wsRUFBRTtpQkFDSDthQUNGO1NBQ0YsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQ3pCLG1DQUFpQixDQUNsQixDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVIsTUFBTSxDQUFFLE1BQW9DLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzNELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25FLE1BQU0sS0FBSyxHQUF1QztZQUNoRCxJQUFJLEVBQUU7Z0JBQ0osU0FBUyxFQUFFLGVBQWU7YUFDcEI7WUFDUixTQUFTLEVBQUU7Z0JBQ1QsS0FBSyxFQUFFLEVBQUU7YUFDVjtTQUNGLENBQUE7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFBLFVBQU0sRUFBZ0MsbUNBQWlCLENBQUMsQ0FDckUsS0FBSyxDQUNOLENBQUE7UUFFRCxNQUFNLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzFELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hFLE1BQU0sSUFBSSxHQUFHO1lBQ1gsRUFBRSxFQUFFLFFBQVE7U0FDYixDQUFBO1FBQ0QsTUFBTSxLQUFLLEdBQXdDO1lBQ2pELGFBQWEsRUFBRSxjQUFjO1lBQzdCLE1BQU0sRUFBRSxJQUFJO1NBQ2IsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQWdDLGdDQUFjLENBQUMsQ0FDeEUsS0FBSyxDQUNOLENBQUE7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUE7UUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBSSxDQUFDLENBQUE7SUFDckMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsbURBQW1ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDakUsTUFBTSxJQUFJLEdBQUc7WUFDWCxFQUFFLEVBQUUsUUFBUTtTQUNiLENBQUE7UUFDRCxNQUFNLEtBQUssR0FBd0M7WUFDakQsYUFBYSxFQUFFLGdCQUFnQjtZQUMvQixNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUE7UUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsVUFBTSxFQUFnQyxnQ0FBYyxDQUFDLENBQ3hFLEtBQUssQ0FDTixDQUFBO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsc0JBQUksQ0FBQyxDQUFBO0lBQ3JDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25ELE1BQU0sT0FBTyxHQUFrQjtZQUM3QixPQUFPLEVBQUU7Z0JBQ1AsRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUU7Z0JBQ25DLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFO2FBQ25DO1NBQ0ssQ0FBQTtRQUVSLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQWdDLGlDQUFlLENBQUMsQ0FDekUsT0FBTyxDQUNSLENBQUE7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFwcFN5bmNSZXNvbHZlckV2ZW50LFxuICBFdmVudEJyaWRnZUV2ZW50LFxuICBTM0NyZWF0ZUV2ZW50LFxufSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHsgY2FsbGVyIH0gZnJvbSAnLi4nXG5pbXBvcnQge1xuICBHYW1lLFxuICBHYW1lQ29udHJvbGxlcixcbiAgSW1hZ2VDb250cm9sbGVyLFxuICBQcm9kdWN0Q29udHJvbGxlcixcbn0gZnJvbSAnLi9jb250cm9sbGVyLm1vY2snXG5cbmRlc2NyaWJlKCdjb250cm9sbGVyJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGNyZWF0ZSBhcHBzeW5jIGNvbnRyb2xsZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgaWQgPSAndXVpZCdcbiAgICBjb25zdCBldmVudDogUGFydGlhbDxBcHBTeW5jUmVzb2x2ZXJFdmVudDxhbnk+PiA9IHtcbiAgICAgIGluZm86IHtcbiAgICAgICAgZmllbGROYW1lOiAnZ2V0UHJvZHVjdCcsXG4gICAgICB9IGFzIGFueSxcbiAgICAgIGFyZ3VtZW50czoge1xuICAgICAgICBpZCxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihcbiAgICAgIFByb2R1Y3RDb250cm9sbGVyXG4gICAgKShldmVudClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoaWQpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjYWxsIGFwcHN5bmMgY29udHJvbGxlciBtdXRhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9ICd1dWlkJ1xuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFwcFN5bmNSZXNvbHZlckV2ZW50PGFueT4+ID0ge1xuICAgICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6ICdjcmVhdGVQcm9kdWN0JyxcbiAgICAgIH0gYXMgYW55LFxuICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgaWQsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxlcjxhbnksIHsgZ2FtZTogYW55OyB0eXBlOiBhbnkgfT4oXG4gICAgICBQcm9kdWN0Q29udHJvbGxlclxuICAgICkoZXZlbnQpXG5cbiAgICBleHBlY3QoKHJlc3VsdCBhcyB1bmtub3duIGFzIHsgaWQ6IHN0cmluZyB9KS5pZCkudG9CZShpZClcbiAgfSlcblxuICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZyb20gYXBwc3luYyBjb250cm9sbGVyIG11dGF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFwcFN5bmNSZXNvbHZlckV2ZW50PGFueT4+ID0ge1xuICAgICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6ICdjcmVhdGVQcm9kdWN0JyxcbiAgICAgIH0gYXMgYW55LFxuICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGlucHV0OiB7fSxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihQcm9kdWN0Q29udHJvbGxlcikoXG4gICAgICBldmVudFxuICAgIClcblxuICAgIGF3YWl0IGV4cGVjdChhc3luYyAoKSA9PiBhd2FpdCByZXN1bHQpLnJlamVjdHMudG9UaHJvdygpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgZXZlbnQgYnJpZGdlIGNvbnRyb2xsZXIgZm9yIHVwZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBnYW1lID0ge1xuICAgICAgaWQ6ICdnYW1lSWQnLFxuICAgIH1cbiAgICBjb25zdCBldmVudDogUGFydGlhbDxFdmVudEJyaWRnZUV2ZW50PGFueSwgYW55Pj4gPSB7XG4gICAgICAnZGV0YWlsLXR5cGUnOiAnR0FNRV9VUERBVEVEJyxcbiAgICAgIGRldGFpbDogZ2FtZSxcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsZXI8YW55LCB7IGdhbWU6IGFueTsgdHlwZTogYW55IH0+KEdhbWVDb250cm9sbGVyKShcbiAgICAgIGV2ZW50XG4gICAgKVxuXG4gICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7IC4uLmdhbWUsIHN0YXR1czogJ3ZhbGlkYXRpb24nIH0pXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZUluc3RhbmNlT2YoR2FtZSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBldmVudCBicmlkZ2UgY29udHJvbGxlciBmb3IgcHVibGlzaCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBnYW1lID0ge1xuICAgICAgaWQ6ICdnYW1lSWQnLFxuICAgIH1cbiAgICBjb25zdCBldmVudDogUGFydGlhbDxFdmVudEJyaWRnZUV2ZW50PGFueSwgYW55Pj4gPSB7XG4gICAgICAnZGV0YWlsLXR5cGUnOiAnR0FNRV9QVUJMSVNIRUQnLFxuICAgICAgZGV0YWlsOiBnYW1lLFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxlcjxhbnksIHsgZ2FtZTogYW55OyB0eXBlOiBhbnkgfT4oR2FtZUNvbnRyb2xsZXIpKFxuICAgICAgZXZlbnRcbiAgICApXG5cbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgLi4uZ2FtZSwgc3RhdHVzOiAncHVibGlzaGVkJyB9KVxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVJbnN0YW5jZU9mKEdhbWUpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgczMgcmVjb3JkcyBjb250cm9sbGVyJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHMzRXZlbnQ6IFMzQ3JlYXRlRXZlbnQgPSB7XG4gICAgICBSZWNvcmRzOiBbXG4gICAgICAgIHsgZXZlbnROYW1lOiAnT2JqZWN0Q3JlYXRlZDpDb3B5JyB9LFxuICAgICAgICB7IGV2ZW50TmFtZTogJ09iamVjdENyZWF0ZWQ6UHV0JyB9LFxuICAgICAgXSxcbiAgICB9IGFzIGFueVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihJbWFnZUNvbnRyb2xsZXIpKFxuICAgICAgczNFdmVudFxuICAgIClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmVVbmRlZmluZWQoKVxuICB9KVxufSlcbiJdfQ==