"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const controller_mock_1 = require("./controller.mock");
describe('controller', () => {
    it('should create appsync controller', async () => {
        const id = 'uuid';
        const event = {
            info: {
                fieldName: 'getProduct',
            },
            arguments: {
                id,
            },
        };
        const result = await (0, __1.caller)(controller_mock_1.ProductController)(event);
        expect(result).toBe(id);
    });
    it('should create event bridge controller for update', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_UPDATED',
            detail: game,
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'validation' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
    it('should create event bridge controller for publish', async () => {
        const game = {
            id: 'gameId',
        };
        const event = {
            'detail-type': 'GAME_PUBLISHED',
            detail: game,
        };
        const result = await (0, __1.caller)(controller_mock_1.GameController)(event);
        expect(result).toEqual({ ...game, status: 'published' });
        expect(result).toBeInstanceOf(controller_mock_1.Game);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci50ZXN0LmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImRlY29yYXRvcnMvY29udHJvbGxlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMEJBQTJCO0FBQzNCLHVEQUEyRTtBQUUzRSxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUMxQixFQUFFLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ2pCLE1BQU0sS0FBSyxHQUF1QztZQUNoRCxJQUFJLEVBQUU7Z0JBQ0osU0FBUyxFQUFFLFlBQVk7YUFDakI7WUFDUixTQUFTLEVBQUU7Z0JBQ1QsRUFBRTthQUNIO1NBQ0YsQ0FBQTtRQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxVQUFNLEVBQ3pCLG1DQUFpQixDQUNsQixDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxrREFBa0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRSxNQUFNLElBQUksR0FBRztZQUNYLEVBQUUsRUFBRSxRQUFRO1NBQ2IsQ0FBQTtRQUNELE1BQU0sS0FBSyxHQUF3QztZQUNqRCxhQUFhLEVBQUUsY0FBYztZQUM3QixNQUFNLEVBQUUsSUFBSTtTQUNiLENBQUE7UUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsVUFBTSxFQUFnQyxnQ0FBYyxDQUFDLENBQ3hFLEtBQUssQ0FDTixDQUFBO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsSUFBSSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFBO1FBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxjQUFjLENBQUMsc0JBQUksQ0FBQyxDQUFBO0lBQ3JDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pFLE1BQU0sSUFBSSxHQUFHO1lBQ1gsRUFBRSxFQUFFLFFBQVE7U0FDYixDQUFBO1FBQ0QsTUFBTSxLQUFLLEdBQXdDO1lBQ2pELGFBQWEsRUFBRSxnQkFBZ0I7WUFDL0IsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFBO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLFVBQU0sRUFBZ0MsZ0NBQWMsQ0FBQyxDQUN4RSxLQUFLLENBQ04sQ0FBQTtRQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsY0FBYyxDQUFDLHNCQUFJLENBQUMsQ0FBQTtJQUNyQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwU3luY1Jlc29sdmVyRXZlbnQsIEV2ZW50QnJpZGdlRXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHsgY2FsbGVyIH0gZnJvbSAnLi4nXG5pbXBvcnQgeyBHYW1lLCBHYW1lQ29udHJvbGxlciwgUHJvZHVjdENvbnRyb2xsZXIgfSBmcm9tICcuL2NvbnRyb2xsZXIubW9jaydcblxuZGVzY3JpYmUoJ2NvbnRyb2xsZXInLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIGFwcHN5bmMgY29udHJvbGxlcicsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBpZCA9ICd1dWlkJ1xuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEFwcFN5bmNSZXNvbHZlckV2ZW50PGFueT4+ID0ge1xuICAgICAgaW5mbzoge1xuICAgICAgICBmaWVsZE5hbWU6ICdnZXRQcm9kdWN0JyxcbiAgICAgIH0gYXMgYW55LFxuICAgICAgYXJndW1lbnRzOiB7XG4gICAgICAgIGlkLFxuICAgICAgfSxcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsZXI8YW55LCB7IGdhbWU6IGFueTsgdHlwZTogYW55IH0+KFxuICAgICAgUHJvZHVjdENvbnRyb2xsZXJcbiAgICApKGV2ZW50KVxuXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZShpZClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBldmVudCBicmlkZ2UgY29udHJvbGxlciBmb3IgdXBkYXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGdhbWUgPSB7XG4gICAgICBpZDogJ2dhbWVJZCcsXG4gICAgfVxuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEV2ZW50QnJpZGdlRXZlbnQ8YW55LCBhbnk+PiA9IHtcbiAgICAgICdkZXRhaWwtdHlwZSc6ICdHQU1FX1VQREFURUQnLFxuICAgICAgZGV0YWlsOiBnYW1lLFxuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxlcjxhbnksIHsgZ2FtZTogYW55OyB0eXBlOiBhbnkgfT4oR2FtZUNvbnRyb2xsZXIpKFxuICAgICAgZXZlbnRcbiAgICApXG5cbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHsgLi4uZ2FtZSwgc3RhdHVzOiAndmFsaWRhdGlvbicgfSlcbiAgICBleHBlY3QocmVzdWx0KS50b0JlSW5zdGFuY2VPZihHYW1lKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY3JlYXRlIGV2ZW50IGJyaWRnZSBjb250cm9sbGVyIGZvciBwdWJsaXNoJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGdhbWUgPSB7XG4gICAgICBpZDogJ2dhbWVJZCcsXG4gICAgfVxuICAgIGNvbnN0IGV2ZW50OiBQYXJ0aWFsPEV2ZW50QnJpZGdlRXZlbnQ8YW55LCBhbnk+PiA9IHtcbiAgICAgICdkZXRhaWwtdHlwZSc6ICdHQU1FX1BVQkxJU0hFRCcsXG4gICAgICBkZXRhaWw6IGdhbWUsXG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGVyPGFueSwgeyBnYW1lOiBhbnk7IHR5cGU6IGFueSB9PihHYW1lQ29udHJvbGxlcikoXG4gICAgICBldmVudFxuICAgIClcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyAuLi5nYW1lLCBzdGF0dXM6ICdwdWJsaXNoZWQnIH0pXG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZUluc3RhbmNlT2YoR2FtZSlcbiAgfSlcbn0pXG4iXX0=