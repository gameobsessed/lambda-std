"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationStorage = void 0;
class ConfigurationStorage {
    constructor() {
        this.controllers = [];
        this.handlers = new Map();
        this.params = [];
        this.errorHandlers = [];
        this.initializers = [];
        this.validators = [];
    }
    addParam(param) {
        this.params.push(param);
    }
    addHandler(handler) {
        const { route = 'default', object } = handler;
        const constructor = object.constructor;
        const controllerHandlers = this.handlers.has(constructor)
            ? this.handlers.get(constructor)
            : new Map();
        controllerHandlers.set(route, handler);
        this.handlers.set(constructor, controllerHandlers);
    }
    addInitializer(initializer) {
        this.initializers.push(initializer);
    }
    addValidator(validator) {
        this.validators.push(validator);
    }
    findHandler(object, route = 'default') {
        const controllerHandlers = this.handlers.get(object);
        if (!controllerHandlers) {
            return undefined;
        }
        return controllerHandlers.get(route);
    }
    findInitializer(object) {
        return this.initializers.find((initializer) => initializer.object.constructor === object);
    }
    findParams(object, methodName) {
        return this.params.filter((param) => param.object.constructor === object && param.methodName === methodName);
    }
    findValidator(object) {
        return this.validators.find((handler) => handler.object === object);
    }
}
exports.ConfigurationStorage = ConfigurationStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1zdG9yYWdlLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRvci9jb25maWd1cmF0aW9uLXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBdUNBLE1BQWEsb0JBQW9CO0lBQWpDO1FBQ0UsZ0JBQVcsR0FBVSxFQUFFLENBQUE7UUFDdkIsYUFBUSxHQUE2RCxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzlFLFdBQU0sR0FBdUIsRUFBRSxDQUFBO1FBQy9CLGtCQUFhLEdBQVUsRUFBRSxDQUFBO1FBQ3pCLGlCQUFZLEdBQWdDLEVBQUUsQ0FBQTtRQUM5QyxlQUFVLEdBQThCLEVBQUUsQ0FBQTtJQWtENUMsQ0FBQztJQWhEQyxRQUFRLENBQU8sS0FBbUI7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUE4QjtRQUN2QyxNQUFNLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQTtRQUN0QyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFO1lBQ2pDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBMEMsQ0FBQTtRQUNyRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBc0M7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVELFlBQVksQ0FBQyxTQUFrQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixTQUFTO1FBQ25ELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFcEQsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLE9BQU8sU0FBUyxDQUFBO1NBQ2pCO1FBRUQsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFjO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQzNELENBQUE7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQWMsRUFBRSxVQUEyQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUN2QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQ1IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUN6RSxDQUFBO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxNQUFjO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUE7SUFDckUsQ0FBQztDQUNGO0FBeERELG9EQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHsgQW55T2JqZWN0U2NoZW1hIH0gZnJvbSAneXVwJ1xuXG5leHBvcnQgdHlwZSBQYXJhbVR5cGUgPSAnZGV0YWlsJyB8ICdkZXRhaWxUeXBlJyB8ICdhcmd1bWVudCdcblxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1Db25maWd1cmF0aW9uIHtcbiAgdHlwZTogUGFyYW1UeXBlXG4gIG9iamVjdDogT2JqZWN0XG4gIG1ldGhvZE5hbWU6IHN0cmluZyB8IHN5bWJvbFxuICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyXG4gIHRhcmdldFR5cGU/OiBhbnlcbiAgcGFyc2U/OiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtPFQsIFI+IGV4dGVuZHMgSVBhcmFtQ29uZmlndXJhdGlvbiB7XG4gIHJlc29sdmUoZXZlbnQ6IFQsIGNvbnRleHQ6IENvbnRleHQpOiBQcm9taXNlPFI+XG59XG5cbmV4cG9ydCB0eXBlIEhhbmRsZXJUeXBlID0gJ2hhbmRsZXInIHwgJ3F1ZXJ5J1xuXG5leHBvcnQgaW50ZXJmYWNlIElIYW5kbGVyQ29uZmlndXJhdGlvbiB7XG4gIHR5cGU6IEhhbmRsZXJUeXBlXG4gIG9iamVjdDogT2JqZWN0XG4gIG1ldGhvZE5hbWU6IHN0cmluZyB8IHN5bWJvbFxuICByb3V0ZT86IHN0cmluZyB8IHN5bWJvbFxuICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElJbml0aWFsaXplckNvbmZpZ3VyYXRpb24ge1xuICBvYmplY3Q6IE9iamVjdFxuICBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2xcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdG9yQ29uZmlndXJhdGlvbiB7XG4gIG9iamVjdDogT2JqZWN0XG4gIHNjaGVtYTogQW55T2JqZWN0U2NoZW1hXG4gIG9wdGlvbnM/OiBhbnlcbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25TdG9yYWdlIHtcbiAgY29udHJvbGxlcnM6IGFueVtdID0gW11cbiAgaGFuZGxlcnM6IE1hcDxPYmplY3QsIE1hcDxzdHJpbmcgfCBzeW1ib2wsIElIYW5kbGVyQ29uZmlndXJhdGlvbj4+ID0gbmV3IE1hcCgpXG4gIHBhcmFtczogSVBhcmFtPGFueSwgYW55PltdID0gW11cbiAgZXJyb3JIYW5kbGVyczogYW55W10gPSBbXVxuICBpbml0aWFsaXplcnM6IElJbml0aWFsaXplckNvbmZpZ3VyYXRpb25bXSA9IFtdXG4gIHZhbGlkYXRvcnM6IElWYWxpZGF0b3JDb25maWd1cmF0aW9uW10gPSBbXVxuXG4gIGFkZFBhcmFtPFQsIFI+KHBhcmFtOiBJUGFyYW08VCwgUj4pIHtcbiAgICB0aGlzLnBhcmFtcy5wdXNoKHBhcmFtKVxuICB9XG5cbiAgYWRkSGFuZGxlcihoYW5kbGVyOiBJSGFuZGxlckNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCB7IHJvdXRlID0gJ2RlZmF1bHQnLCBvYmplY3QgfSA9IGhhbmRsZXJcbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvclxuICAgIGNvbnN0IGNvbnRyb2xsZXJIYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuaGFzKGNvbnN0cnVjdG9yKVxuICAgICAgPyB0aGlzLmhhbmRsZXJzLmdldChjb25zdHJ1Y3RvcikhXG4gICAgICA6IG5ldyBNYXA8c3RyaW5nIHwgc3ltYm9sLCBJSGFuZGxlckNvbmZpZ3VyYXRpb24+KClcbiAgICBjb250cm9sbGVySGFuZGxlcnMuc2V0KHJvdXRlLCBoYW5kbGVyKVxuICAgIHRoaXMuaGFuZGxlcnMuc2V0KGNvbnN0cnVjdG9yLCBjb250cm9sbGVySGFuZGxlcnMpXG4gIH1cblxuICBhZGRJbml0aWFsaXplcihpbml0aWFsaXplcjogSUluaXRpYWxpemVyQ29uZmlndXJhdGlvbikge1xuICAgIHRoaXMuaW5pdGlhbGl6ZXJzLnB1c2goaW5pdGlhbGl6ZXIpXG4gIH1cblxuICBhZGRWYWxpZGF0b3IodmFsaWRhdG9yOiBJVmFsaWRhdG9yQ29uZmlndXJhdGlvbikge1xuICAgIHRoaXMudmFsaWRhdG9ycy5wdXNoKHZhbGlkYXRvcilcbiAgfVxuXG4gIGZpbmRIYW5kbGVyKG9iamVjdDogT2JqZWN0LCByb3V0ZTogc3RyaW5nID0gJ2RlZmF1bHQnKSB7XG4gICAgY29uc3QgY29udHJvbGxlckhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5nZXQob2JqZWN0KVxuXG4gICAgaWYgKCFjb250cm9sbGVySGFuZGxlcnMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJvbGxlckhhbmRsZXJzLmdldChyb3V0ZSlcbiAgfVxuXG4gIGZpbmRJbml0aWFsaXplcihvYmplY3Q6IE9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLmluaXRpYWxpemVycy5maW5kKFxuICAgICAgKGluaXRpYWxpemVyKSA9PiBpbml0aWFsaXplci5vYmplY3QuY29uc3RydWN0b3IgPT09IG9iamVjdFxuICAgIClcbiAgfVxuXG4gIGZpbmRQYXJhbXMob2JqZWN0OiBPYmplY3QsIG1ldGhvZE5hbWU6IHN0cmluZyB8IHN5bWJvbCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5maWx0ZXIoXG4gICAgICAocGFyYW0pID0+XG4gICAgICAgIHBhcmFtLm9iamVjdC5jb25zdHJ1Y3RvciA9PT0gb2JqZWN0ICYmIHBhcmFtLm1ldGhvZE5hbWUgPT09IG1ldGhvZE5hbWVcbiAgICApXG4gIH1cblxuICBmaW5kVmFsaWRhdG9yKG9iamVjdDogT2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9ycy5maW5kKChoYW5kbGVyKSA9PiBoYW5kbGVyLm9iamVjdCA9PT0gb2JqZWN0KVxuICB9XG59XG4iXX0=