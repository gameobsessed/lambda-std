"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationStorage = void 0;
class ConfigurationStorage {
    constructor() {
        this.controllers = [];
        this.handlers = new Map();
        this.params = [];
        this.errorHandlers = [];
        this.initializers = [];
        this.validators = [];
    }
    addParam(param) {
        this.params.push(param);
    }
    addHandler(handler) {
        const { route = 'default', object } = handler;
        const constructor = object.constructor;
        const controllerHandlers = this.handlers.has(constructor)
            ? this.handlers.get(constructor)
            : new Map();
        controllerHandlers.set(route, handler);
        this.handlers.set(constructor, controllerHandlers);
    }
    addInitializer(initializer) {
        this.initializers.push(initializer);
    }
    addValidator(validator) {
        this.validators.push(validator);
    }
    findHandler(object, route = 'default') {
        const controllerHandlers = this.handlers.get(object);
        if (!controllerHandlers) {
            return undefined;
        }
        return controllerHandlers.get(route);
    }
    findInitializer(object) {
        return this.initializers.find((initializer) => initializer.object.constructor === object);
    }
    findParams(object, methodName) {
        return this.params.filter((param) => param.object.constructor === object && param.methodName === methodName);
    }
    findValidator(object) {
        return this.validators.find((handler) => handler.object === object);
    }
}
exports.ConfigurationStorage = ConfigurationStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1zdG9yYWdlLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRvci9jb25maWd1cmF0aW9uLXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBMENBLE1BQWEsb0JBQW9CO0lBQWpDO1FBQ0UsZ0JBQVcsR0FBVSxFQUFFLENBQUE7UUFDdkIsYUFBUSxHQUE2RCxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzlFLFdBQU0sR0FBdUIsRUFBRSxDQUFBO1FBQy9CLGtCQUFhLEdBQVUsRUFBRSxDQUFBO1FBQ3pCLGlCQUFZLEdBQWdDLEVBQUUsQ0FBQTtRQUM5QyxlQUFVLEdBQThCLEVBQUUsQ0FBQTtJQWtENUMsQ0FBQztJQWhEQyxRQUFRLENBQU8sS0FBbUI7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUE4QjtRQUN2QyxNQUFNLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQTtRQUN0QyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFO1lBQ2pDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBMEMsQ0FBQTtRQUNyRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBc0M7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVELFlBQVksQ0FBQyxTQUFrQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixTQUFTO1FBQ25ELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFcEQsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLE9BQU8sU0FBUyxDQUFBO1NBQ2pCO1FBRUQsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFjO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQzNELENBQUE7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQWMsRUFBRSxVQUEyQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUN2QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQ1IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUN6RSxDQUFBO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxNQUFjO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUE7SUFDckUsQ0FBQztDQUNGO0FBeERELG9EQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuXG5leHBvcnQgdHlwZSBQYXJhbVR5cGUgPSAnZGV0YWlsJyB8ICdkZXRhaWxUeXBlJyB8ICdhcmd1bWVudCcgfCAnZXZlbnRSZWNvcmQnXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtQ29uZmlndXJhdGlvbiB7XG4gIHR5cGU6IFBhcmFtVHlwZVxuICBvYmplY3Q6IE9iamVjdFxuICBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2xcbiAgcGFyYW1ldGVySW5kZXg6IG51bWJlclxuICB0YXJnZXRUeXBlPzogYW55XG4gIHBhcnNlPzogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJhbTxULCBSPiBleHRlbmRzIElQYXJhbUNvbmZpZ3VyYXRpb24ge1xuICByZXNvbHZlKGV2ZW50OiBULCBjb250ZXh0OiBDb250ZXh0KTogUHJvbWlzZTxSPlxufVxuXG5leHBvcnQgdHlwZSBIYW5kbGVyVHlwZSA9ICdoYW5kbGVyJyB8ICdxdWVyeScgfCAnbXV0YXRpb24nIHwgJ2V2ZW50J1xuXG5leHBvcnQgaW50ZXJmYWNlIElIYW5kbGVyQ29uZmlndXJhdGlvbiB7XG4gIHR5cGU6IEhhbmRsZXJUeXBlXG4gIG9iamVjdDogT2JqZWN0XG4gIG1ldGhvZE5hbWU6IHN0cmluZyB8IHN5bWJvbFxuICByb3V0ZT86IHN0cmluZyB8IHN5bWJvbFxuICBvcHRpb25zPzogUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElJbml0aWFsaXplckNvbmZpZ3VyYXRpb24ge1xuICBvYmplY3Q6IE9iamVjdFxuICBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2xcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdGUge1xuICAoLi4uYXJnczogYW55W10pOiBQcm9taXNlPGFueT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmFsaWRhdG9yQ29uZmlndXJhdGlvbiB7XG4gIG9iamVjdDogT2JqZWN0XG4gIHZhbGlkYXRlOiBJVmFsaWRhdGVcbiAgb3B0aW9ucz86IGFueVxufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvblN0b3JhZ2Uge1xuICBjb250cm9sbGVyczogYW55W10gPSBbXVxuICBoYW5kbGVyczogTWFwPE9iamVjdCwgTWFwPHN0cmluZyB8IHN5bWJvbCwgSUhhbmRsZXJDb25maWd1cmF0aW9uPj4gPSBuZXcgTWFwKClcbiAgcGFyYW1zOiBJUGFyYW08YW55LCBhbnk+W10gPSBbXVxuICBlcnJvckhhbmRsZXJzOiBhbnlbXSA9IFtdXG4gIGluaXRpYWxpemVyczogSUluaXRpYWxpemVyQ29uZmlndXJhdGlvbltdID0gW11cbiAgdmFsaWRhdG9yczogSVZhbGlkYXRvckNvbmZpZ3VyYXRpb25bXSA9IFtdXG5cbiAgYWRkUGFyYW08VCwgUj4ocGFyYW06IElQYXJhbTxULCBSPikge1xuICAgIHRoaXMucGFyYW1zLnB1c2gocGFyYW0pXG4gIH1cblxuICBhZGRIYW5kbGVyKGhhbmRsZXI6IElIYW5kbGVyQ29uZmlndXJhdGlvbikge1xuICAgIGNvbnN0IHsgcm91dGUgPSAnZGVmYXVsdCcsIG9iamVjdCB9ID0gaGFuZGxlclxuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yXG4gICAgY29uc3QgY29udHJvbGxlckhhbmRsZXJzID0gdGhpcy5oYW5kbGVycy5oYXMoY29uc3RydWN0b3IpXG4gICAgICA/IHRoaXMuaGFuZGxlcnMuZ2V0KGNvbnN0cnVjdG9yKSFcbiAgICAgIDogbmV3IE1hcDxzdHJpbmcgfCBzeW1ib2wsIElIYW5kbGVyQ29uZmlndXJhdGlvbj4oKVxuICAgIGNvbnRyb2xsZXJIYW5kbGVycy5zZXQocm91dGUsIGhhbmRsZXIpXG4gICAgdGhpcy5oYW5kbGVycy5zZXQoY29uc3RydWN0b3IsIGNvbnRyb2xsZXJIYW5kbGVycylcbiAgfVxuXG4gIGFkZEluaXRpYWxpemVyKGluaXRpYWxpemVyOiBJSW5pdGlhbGl6ZXJDb25maWd1cmF0aW9uKSB7XG4gICAgdGhpcy5pbml0aWFsaXplcnMucHVzaChpbml0aWFsaXplcilcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcih2YWxpZGF0b3I6IElWYWxpZGF0b3JDb25maWd1cmF0aW9uKSB7XG4gICAgdGhpcy52YWxpZGF0b3JzLnB1c2godmFsaWRhdG9yKVxuICB9XG5cbiAgZmluZEhhbmRsZXIob2JqZWN0OiBPYmplY3QsIHJvdXRlOiBzdHJpbmcgPSAnZGVmYXVsdCcpIHtcbiAgICBjb25zdCBjb250cm9sbGVySGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzLmdldChvYmplY3QpXG5cbiAgICBpZiAoIWNvbnRyb2xsZXJIYW5kbGVycykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cblxuICAgIHJldHVybiBjb250cm9sbGVySGFuZGxlcnMuZ2V0KHJvdXRlKVxuICB9XG5cbiAgZmluZEluaXRpYWxpemVyKG9iamVjdDogT2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZXJzLmZpbmQoXG4gICAgICAoaW5pdGlhbGl6ZXIpID0+IGluaXRpYWxpemVyLm9iamVjdC5jb25zdHJ1Y3RvciA9PT0gb2JqZWN0XG4gICAgKVxuICB9XG5cbiAgZmluZFBhcmFtcyhvYmplY3Q6IE9iamVjdCwgbWV0aG9kTmFtZTogc3RyaW5nIHwgc3ltYm9sKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLmZpbHRlcihcbiAgICAgIChwYXJhbSkgPT5cbiAgICAgICAgcGFyYW0ub2JqZWN0LmNvbnN0cnVjdG9yID09PSBvYmplY3QgJiYgcGFyYW0ubWV0aG9kTmFtZSA9PT0gbWV0aG9kTmFtZVxuICAgIClcbiAgfVxuXG4gIGZpbmRWYWxpZGF0b3Iob2JqZWN0OiBPYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzLmZpbmQoKGhhbmRsZXIpID0+IGhhbmRsZXIub2JqZWN0ID09PSBvYmplY3QpXG4gIH1cbn1cbiJdfQ==