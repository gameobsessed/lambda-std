"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationStorage = void 0;
class ConfigurationStorage {
    constructor() {
        this.controllers = [];
        this.handlers = new Map();
        this.params = [];
        this.errorHandlers = [];
        this.initializers = [];
        this.validators = [];
    }
    addParam(param) {
        this.params.push(param);
    }
    addHandler(handler) {
        const { route = 'default', object } = handler;
        const constructor = object.constructor;
        const controllerHandlers = this.handlers.has(constructor)
            ? this.handlers.get(constructor)
            : new Map();
        controllerHandlers.set(route, handler);
        this.handlers.set(constructor, controllerHandlers);
    }
    addInitializer(initializer) {
        this.initializers.push(initializer);
    }
    addValidator(validator) {
        this.validators.push(validator);
    }
    findHandler(object, route = 'default') {
        const controllerHandlers = this.handlers.get(object);
        if (!controllerHandlers) {
            return undefined;
        }
        return controllerHandlers.get(route);
    }
    findInitializer(object) {
        return this.initializers.find((initializer) => initializer.object.constructor === object);
    }
    findParams(object, methodName) {
        return this.params.filter((param) => param.object.constructor === object && param.methodName === methodName);
    }
    findValidator(object) {
        return this.validators.find((handler) => handler.object === object);
    }
}
exports.ConfigurationStorage = ConfigurationStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1zdG9yYWdlLmpzIiwic291cmNlUm9vdCI6InNyYy8iLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRvci9jb25maWd1cmF0aW9uLXN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBdUNBLE1BQWEsb0JBQW9CO0lBQWpDO1FBQ0UsZ0JBQVcsR0FBVSxFQUFFLENBQUE7UUFDdkIsYUFBUSxHQUE2RCxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQzlFLFdBQU0sR0FBdUIsRUFBRSxDQUFBO1FBQy9CLGtCQUFhLEdBQVUsRUFBRSxDQUFBO1FBQ3pCLGlCQUFZLEdBQWdDLEVBQUUsQ0FBQTtRQUM5QyxlQUFVLEdBQThCLEVBQUUsQ0FBQTtJQWtENUMsQ0FBQztJQWhEQyxRQUFRLENBQU8sS0FBbUI7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDekIsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUE4QjtRQUN2QyxNQUFNLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUE7UUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQTtRQUN0QyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFFO1lBQ2pDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBMEMsQ0FBQTtRQUNyRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFFRCxjQUFjLENBQUMsV0FBc0M7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVELFlBQVksQ0FBQyxTQUFrQztRQUM3QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQWMsRUFBRSxRQUFnQixTQUFTO1FBQ25ELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFFcEQsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLE9BQU8sU0FBUyxDQUFBO1NBQ2pCO1FBRUQsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFjO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQzNCLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsS0FBSyxNQUFNLENBQzNELENBQUE7SUFDSCxDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQWMsRUFBRSxVQUEyQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUN2QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQ1IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUN6RSxDQUFBO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxNQUFjO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUE7SUFDckUsQ0FBQztDQUNGO0FBeERELG9EQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRleHQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHsgQW55T2JqZWN0U2NoZW1hIH0gZnJvbSAneXVwJ1xuXG5leHBvcnQgdHlwZSBQYXJhbVR5cGUgPSAnZGV0YWlsJyB8ICdkZXRhaWxUeXBlJyB8ICdhcmd1bWVudCdcblxuZXhwb3J0IGludGVyZmFjZSBJUGFyYW1Db25maWd1cmF0aW9uIHtcbiAgdHlwZTogUGFyYW1UeXBlXG4gIG9iamVjdDogT2JqZWN0XG4gIG1ldGhvZE5hbWU6IHN0cmluZyB8IHN5bWJvbFxuICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyXG4gIHRhcmdldFR5cGU/OiBhbnlcbiAgcGFyc2U/OiBib29sZWFuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtPFQsIFI+IGV4dGVuZHMgSVBhcmFtQ29uZmlndXJhdGlvbiB7XG4gIHJlc29sdmUoZXZlbnQ6IFQsIGNvbnRleHQ6IENvbnRleHQpOiBQcm9taXNlPFI+XG59XG5cbmV4cG9ydCB0eXBlIEhhbmRsZXJUeXBlID0gJ2hhbmRsZXInIHwgJ3F1ZXJ5JyB8ICdtdXRhdGlvbidcblxuZXhwb3J0IGludGVyZmFjZSBJSGFuZGxlckNvbmZpZ3VyYXRpb24ge1xuICB0eXBlOiBIYW5kbGVyVHlwZVxuICBvYmplY3Q6IE9iamVjdFxuICBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2xcbiAgcm91dGU/OiBzdHJpbmcgfCBzeW1ib2xcbiAgb3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIGFueT5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJSW5pdGlhbGl6ZXJDb25maWd1cmF0aW9uIHtcbiAgb2JqZWN0OiBPYmplY3RcbiAgbWV0aG9kTmFtZTogc3RyaW5nIHwgc3ltYm9sXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVZhbGlkYXRvckNvbmZpZ3VyYXRpb24ge1xuICBvYmplY3Q6IE9iamVjdFxuICBzY2hlbWE6IEFueU9iamVjdFNjaGVtYVxuICBvcHRpb25zPzogYW55XG59XG5cbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uU3RvcmFnZSB7XG4gIGNvbnRyb2xsZXJzOiBhbnlbXSA9IFtdXG4gIGhhbmRsZXJzOiBNYXA8T2JqZWN0LCBNYXA8c3RyaW5nIHwgc3ltYm9sLCBJSGFuZGxlckNvbmZpZ3VyYXRpb24+PiA9IG5ldyBNYXAoKVxuICBwYXJhbXM6IElQYXJhbTxhbnksIGFueT5bXSA9IFtdXG4gIGVycm9ySGFuZGxlcnM6IGFueVtdID0gW11cbiAgaW5pdGlhbGl6ZXJzOiBJSW5pdGlhbGl6ZXJDb25maWd1cmF0aW9uW10gPSBbXVxuICB2YWxpZGF0b3JzOiBJVmFsaWRhdG9yQ29uZmlndXJhdGlvbltdID0gW11cblxuICBhZGRQYXJhbTxULCBSPihwYXJhbTogSVBhcmFtPFQsIFI+KSB7XG4gICAgdGhpcy5wYXJhbXMucHVzaChwYXJhbSlcbiAgfVxuXG4gIGFkZEhhbmRsZXIoaGFuZGxlcjogSUhhbmRsZXJDb25maWd1cmF0aW9uKSB7XG4gICAgY29uc3QgeyByb3V0ZSA9ICdkZWZhdWx0Jywgb2JqZWN0IH0gPSBoYW5kbGVyXG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3JcbiAgICBjb25zdCBjb250cm9sbGVySGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzLmhhcyhjb25zdHJ1Y3RvcilcbiAgICAgID8gdGhpcy5oYW5kbGVycy5nZXQoY29uc3RydWN0b3IpIVxuICAgICAgOiBuZXcgTWFwPHN0cmluZyB8IHN5bWJvbCwgSUhhbmRsZXJDb25maWd1cmF0aW9uPigpXG4gICAgY29udHJvbGxlckhhbmRsZXJzLnNldChyb3V0ZSwgaGFuZGxlcilcbiAgICB0aGlzLmhhbmRsZXJzLnNldChjb25zdHJ1Y3RvciwgY29udHJvbGxlckhhbmRsZXJzKVxuICB9XG5cbiAgYWRkSW5pdGlhbGl6ZXIoaW5pdGlhbGl6ZXI6IElJbml0aWFsaXplckNvbmZpZ3VyYXRpb24pIHtcbiAgICB0aGlzLmluaXRpYWxpemVycy5wdXNoKGluaXRpYWxpemVyKVxuICB9XG5cbiAgYWRkVmFsaWRhdG9yKHZhbGlkYXRvcjogSVZhbGlkYXRvckNvbmZpZ3VyYXRpb24pIHtcbiAgICB0aGlzLnZhbGlkYXRvcnMucHVzaCh2YWxpZGF0b3IpXG4gIH1cblxuICBmaW5kSGFuZGxlcihvYmplY3Q6IE9iamVjdCwgcm91dGU6IHN0cmluZyA9ICdkZWZhdWx0Jykge1xuICAgIGNvbnN0IGNvbnRyb2xsZXJIYW5kbGVycyA9IHRoaXMuaGFuZGxlcnMuZ2V0KG9iamVjdClcblxuICAgIGlmICghY29udHJvbGxlckhhbmRsZXJzKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRyb2xsZXJIYW5kbGVycy5nZXQocm91dGUpXG4gIH1cblxuICBmaW5kSW5pdGlhbGl6ZXIob2JqZWN0OiBPYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplcnMuZmluZChcbiAgICAgIChpbml0aWFsaXplcikgPT4gaW5pdGlhbGl6ZXIub2JqZWN0LmNvbnN0cnVjdG9yID09PSBvYmplY3RcbiAgICApXG4gIH1cblxuICBmaW5kUGFyYW1zKG9iamVjdDogT2JqZWN0LCBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2wpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMuZmlsdGVyKFxuICAgICAgKHBhcmFtKSA9PlxuICAgICAgICBwYXJhbS5vYmplY3QuY29uc3RydWN0b3IgPT09IG9iamVjdCAmJiBwYXJhbS5tZXRob2ROYW1lID09PSBtZXRob2ROYW1lXG4gICAgKVxuICB9XG5cbiAgZmluZFZhbGlkYXRvcihvYmplY3Q6IE9iamVjdCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnMuZmluZCgoaGFuZGxlcikgPT4gaGFuZGxlci5vYmplY3QgPT09IG9iamVjdClcbiAgfVxufVxuIl19